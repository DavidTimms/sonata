utils = require("../utils/utils")
wrapStringTokens = utils.wrapStringTokens
printObject = utils.printObject
isCallTo = utils.isCallTo
isOperator = utils.isOperator

set! module.exports = matchPattern

fn main(shouldTest):
	if (shouldTest == "TEST"):
		test("a", "val")
		test("[a, b]", "val")

fn test(pattern, expression):
	tokenize = require("../tokenizer")
	parse = require("../parser")
	printObject(get(pattern => tokenize => parse, 0)
		=> matchPattern(wrapStringTokens(expression)))

fn matchPattern(pattern, expression):
	matchers
		.find(matcher -> matcher.filterPredicate(pattern))
		.matcherFunc(pattern, expression)

type Matcher(filterPredicate, matcherFunc)

matchers = []
	
fn defineMatcher(filterPredicate, matcherFunc):
		set! matchers = matchers.push(Matcher(filterPredicate, matcherFunc))


# identifier matcher
defineMatcher(pattern -> pattern.type == "Identifier", (pattern, expression) ->
	{
		conditions: Array()
		assignments: Array(exp("=", pattern, expression))
	}
)

# literal matcher
defineMatcher(pattern -> pattern.type == "Literal", (pattern, expression) ->
	{
		conditions: Array(exp("===", expression, pattern))
		assignments: Array()
	}
)

# vector matcher
defineMatcher(isCallTo("Vector"), (pattern, expression) ->
	subPatterns = pattern.slice(1)

	initialState = {
		conditions: Array(
			exp("::", expression, "IndexedSequence")
			if subPatterns.some(isCallTo("...")):
				exp(">=", exp(".", expression, "length"), subPatterns.length - 1)
			else:
				exp("===", exp(".", expression, "length"), subPatterns.length)
		)
		assignments: Array()
	}

	subPatterns.reduce(
		(state, subPattern, i) ->
			subMatch = 
				if isCallTo("...", subPattern):
					sliceEndIndex = i + 1 - subPatterns.length
					sliceExp = 
						if sliceEndIndex < 0:
							exp(exp(".", expression, "slice"), i, sliceEndIndex)
						else:
							exp(exp(".", expression, "slice"), i)

					matchPattern(get(subPattern, 1), sliceExp)
				else:
					matchPattern(subPattern, 
						exp(exp(".", expression, "get"), i))
			{
				conditions: state.conditions ++ subMatch.conditions
				assignments: state.assignments ++ subMatch.assignments
			}
		initialState
	)
)

# struct matcher
defineMatcher(
	pattern -> pattern :: Array & isOperator(get(pattern, 0))
	(pattern, expression) -> throw SyntaxError("Invalid pattern")
)

# struct matcher
defineMatcher(always, (pattern, expression) ->
	fail
)

fn exp(...subExps):
	wrapStringTokens(subExps.toArray())

fn always(): true