nodeREPL = require("repl")
vm = require("vm")

tokenize = require("../tokenizer")
parse = require("../parser")
convertAST = require("../ast-converter")
validateAST = require("ast-validator")
escodegen = require("escodegen")

fn main():
	options = {
		prompt: "sonata> "
		useGlobal: true

		fn self.eval(wrappedInput, context, filename, callback): tryCatch(
			fn ():
				input = wrappedInput.slice(1, -2)
				tokens = tokenize(input)
				sonataAST = parse(tokens)

				convertAST.convertPartial(sonataAST, fn (jsAST): tryCatch(
					fn ():
						validateAST(jsAST)
						js = escodegen.generate(jsAST)
						callback(null, vm.runInThisContext(js, filename))
					fn (e): callback(e)
				))
			fn (e): callback(e)
		)
	}

	repl = nodeREPL.start(options)

	# load the prelude (runtime) into the context
	convertAST.prelude(fn (preludeAST):
		js = escodegen.generate(preludeAST)
		vm.runInThisContext(js, "prelude")
	)