
initialNumCounters = 3

fn getIndex(event):
	id = event.currentTarget.parentElement.id
	Number(id.substring("counter-".length))

# an infinite list repeating the colours
colours = ["red", "green", "blue", "yellow"]

container = $("#counters-container")

# Create a Map with the number of times up 
# and down have been clicked for each counter
fn countClicks(clickCounts, index):
	clickCounts.set(index, (clickCounts[index] or 0) + 1)

up = container.asEventStream("click", ".counter .up")
	.map(getIndex)
	.scan(Map(), countClicks)

down = container.asEventStream("click", ".counter .down")
	.map(getIndex)
	.scan(Map(), countClicks)


# Combine the up and down counts to get a list of totals
counts = Bacon.combineWith(fn (up, down):
	Range().map(fn (i): (up[i] or 0) - (down[i] or 0))
, up, down)


# The number of counters (including deleted ones) is just 
# the number of times the "add counter" button has been pressed
numCounters = container.asEventStream("click", ".add-counter")
	.map(1)
	.scan(initialNumCounters, fn (a, b): a + b)


# A Map with `true` at the index of any deleted counter
deleted = container.asEventStream("click", ".counter .delete")
	.map(getIndex)
	.scan(Map(), fn (deletions, index): deletions.set(index, true))


# Create a list of objects representing each visible counter
fn counterList(numCounters, counts, deleted):
	# build the data object for each counter
	# then filter to remove deleted counters
	Range(0, numCounters).map(fn (i):
		{
			index: i
			count: counts[i]
			colour: colours[i % colours.length]
		}
	).filter(fn (data, i): not deleted[i])

visibleCounters = Bacon.combineWith(counterList, numCounters, counts, deleted)


# Calculate the sum of all the counters
sumCounts = visibleCounters.map(fn (countersData):
	countersData.reduce(fn (total, current): total + current.count, 0)
)

# initialise the ractive component with 
# the list of counters as it's data source
ractive = new(Ractive, {
	el: "counters-container"
	template: "#counters-template"
	adapt: "Bacon"
	data: {
		counters: visibleCounters.map(fn (vec): vec.toArray()), 
		totalCount: sumCounts
	}
})