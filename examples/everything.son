
type Person(name, age, gender)

fn main():
	ensure(doScoping(2) == doScoping(18))

	dave = Person("Dave", 21, "male")
	ensure(isDave(dave))
	jane = Person("Jane", 25, "female")
	ensure(isDave(jane) == false)

	names = ["John", "Dan", "David", "Dave", "James", "Derrick"]
	parentDict = {
		John: ["Lisa", "Rick"]
		Dan: ["Sarah", "Jim"]
		David: ["Tina", "Les"]
		Derrick: ["Lucy", "Matt"]
	}
	ensure(findName(names) == "David")
	validParents = ["Tina", "Les", "Lucy", "Matt"]
	ensure(findParents(names, parentDict) == validParents)

	ensure(maths.add(get(maths, 45), 2) == 34)

	ensure(country("China", "Asia").describe() == "China is a country in Asia")

	ensure(Map {a: 11, b: 44}["a"] == 11)

	ensure([1, 2, 3][2] == 3)

	ensure((20 => sqrt => Math.pow(2) => Math.floor) == 20)

	ensure(mutatingDouble(5) == 10)

	print("All tests passed")

fn doScoping(x):
	y = true
	if x > 10: do:
		y = false
	y

fn isDave(person):
	with predicate:
		person.age > 18
		person.gender == "male"
		person.name == "Dave"

fn findName(items): with findWhere:
    item <- items
    item.length > 4
    item.charAt(0) == "D"
    item


fn findParents(names, parents): with findAllWhere:
	name <- names
	name.length > 4
	name.charAt(0) == "D"
	get(parents, name)

maths = {
	fn self.add(a, b):
		a + b
	45: 32
}

fn self.blob():
	yo()

# example of using a plain function to simulate a class
fn country(name, continent):
	ensure(name :: String, "Country name must be a String")
	ensure(continent :: String, "Continent name must be a String")
	{
		name: name
		fn self.describe():
			name ++ " is a country in " ++ continent
		fn foo():
			bah()
	}

fn mutatingDouble(x):
	do: set! x = x * 2
	x