
subjects = ["Dave", "Phil", "Ved", "Rob", "Craig", "Alistair"]

qualifiers = ["really", null, "kinda", "probably"]

opinions = ["likes", "enjoys", "hates", "doesn't mind"]

verbs = ["playing", "eating", "watching", "making", null]

targets = ["cake", "football", "video games", "guitar", "piano", "pizza"]

fn main() {
	shuffle(sentences()).forEach(fn (s) print(s))
}

fn sentences() with findAllWhere {
	subject <- subjects
	qualifier <- qualifiers
	opinion <- opinions
	verb <- verbs
	target <- targets
	Math.random() < 0.01
	[subject, qualifier, opinion, verb, target]
		.filter(Boolean)
		.join(" ")
}

fn shuffle(items) {
	if items.length < 2 {
		items
	}
	else {
		halves = partition(items, fn () Math.random() > 0.5).map(shuffle)
		halves.get(0) ++ halves.get(1)
	}
}

fn partition(items, predicate) {
	items.reduce(fn (prev, item) {
		if predicate(item)
			[prev.get(0) ++ [item], prev.get(1)]
		else
			[prev.get(0), prev.get(1) ++ [item]]
	}, [[], []])
}